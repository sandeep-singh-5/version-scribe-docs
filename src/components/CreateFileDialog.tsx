import { useState, useRef } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Plus, Upload, FileText } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { DocumentEditor } from "@onlyoffice/document-editor-react";

interface FileData {
  fileName: string;
  keywords: string;
  downloadLink: string;
  uploadedOn: string;
  author: string;
  version: string;
  remark: string;
}

export type { FileData };

interface CreateFileDialogProps {
  onFileCreate: (fileData: FileData) => void;
}

const CreateFileDialog = ({ onFileCreate }: CreateFileDialogProps) => {
  const [isOpen, setIsOpen] = useState(false);
  const [activeTab, setActiveTab] = useState("create");
  const [showEditor, setShowEditor] = useState(false);
  const [editorContent, setEditorContent] = useState("");
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  // Form state
  const [formData, setFormData] = useState({
    fileName: "",
    keywords: "",
    author: "",
    remark: "",
  });

  const handleInputChange = (field: keyof typeof formData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const validateForm = () => {
    if (!formData.fileName.trim()) {
      toast({
        title: "Error",
        description: "Please enter a filename",
        variant: "destructive",
      });
      return false;
    }
    if (!formData.author.trim()) {
      toast({
        title: "Error",
        description: "Please enter author name",
        variant: "destructive",
      });
      return false;
    }
    return true;
  };

  const handleCreateFile = () => {
    if (!validateForm()) return;
    setShowEditor(true);
  };

  const handleSaveDocument = () => {
    const fileData: FileData = {
      fileName: `${formData.fileName}.docx`,
      keywords: formData.keywords,
      downloadLink: `https://example.com/files/${formData.fileName}.docx`, // This would be generated by server
      uploadedOn: new Date().toISOString(),
      author: formData.author,
      version: "1.0",
      remark: formData.remark,
    };

    onFileCreate(fileData);
    
    toast({
      title: "Document Created",
      description: `${fileData.fileName} has been created successfully`,
    });

    resetForm();
  };

  const handleUploadFile = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (!validateForm()) return;

    // Check if it's a valid file type (you can expand this list as needed)
    const allowedTypes = ['application/vnd.openxmlformats-officedocument.wordprocessingml.document', 
                         'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                         'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                         'application/pdf'];
    
    if (!allowedTypes.includes(file.type)) {
      toast({
        title: "Error",
        description: "Please upload a valid document file (docx, xlsx, pptx, pdf)",
        variant: "destructive",
      });
      return;
    }

    const fileData: FileData = {
      fileName: file.name,
      keywords: formData.keywords,
      downloadLink: `https://example.com/files/${file.name}`, // This would be generated by server
      uploadedOn: new Date().toISOString(),
      author: formData.author,
      version: "1.0",
      remark: formData.remark,
    };

    onFileCreate(fileData);
    
    toast({
      title: "File Uploaded",
      description: `${file.name} has been uploaded successfully`,
    });

    resetForm();
  };

  const resetForm = () => {
    setFormData({
      fileName: "",
      keywords: "",
      author: "",
      remark: "",
    });
    setShowEditor(false);
    setEditorContent("");
    setIsOpen(false);
    setActiveTab("create");
    if (fileInputRef.current) {
      fileInputRef.current.value = "";
    }
  };

  if (showEditor) {
    return (
      <Dialog open={isOpen} onOpenChange={setIsOpen}>
        <DialogTrigger asChild>
          <Button className="bg-primary hover:bg-primary-hover text-primary-foreground">
            <Plus className="h-4 w-4 mr-2" />
            Create New File
          </Button>
        </DialogTrigger>
        <DialogContent className="sm:max-w-4xl max-h-[90vh] bg-card border-border">
          <DialogHeader>
            <DialogTitle className="text-card-foreground">Word Editor - {formData.fileName}.docx</DialogTitle>
          </DialogHeader>
          
          <div className="h-[600px] border border-border rounded-lg overflow-hidden">
            <DocumentEditor
              id="word-editor"
              documentServerUrl="https://documentserver.example.com/" // Replace with your document server URL
              config={{
                document: {
                  fileType: "docx",
                  key: `new-doc-${Date.now()}`,
                  title: `${formData.fileName}.docx`,
                  url: "", // Empty for new document
                },
                documentType: "word",
                editorConfig: {
                  mode: "edit",
                  lang: "en",
                  callbackUrl: "", // Your callback URL
                },
                width: "100%",
                height: "600px",
              }}
            />
          </div>
          
          <div className="flex justify-end space-x-2 mt-4">
            <Button 
              variant="outline" 
              onClick={() => setShowEditor(false)}
              className="border-border text-muted-foreground hover:bg-muted"
            >
              Back
            </Button>
            <Button 
              onClick={handleSaveDocument}
              className="bg-primary hover:bg-primary-hover text-primary-foreground"
            >
              Save Document
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button className="bg-primary hover:bg-primary-hover text-primary-foreground">
          <Plus className="h-4 w-4 mr-2" />
          Create New File
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-lg bg-card border-border">
        <DialogHeader>
          <DialogTitle className="text-card-foreground">Create or Upload Document</DialogTitle>
        </DialogHeader>
        
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="create" className="flex items-center gap-2">
              <FileText className="h-4 w-4" />
              Create Document
            </TabsTrigger>
            <TabsTrigger value="upload" className="flex items-center gap-2">
              <Upload className="h-4 w-4" />
              Upload File
            </TabsTrigger>
          </TabsList>
          
          <div className="mt-6 space-y-4">
            {/* Common form fields */}
            <div className="space-y-2">
              <Label htmlFor="filename" className="text-card-foreground">
                Filename {activeTab === "create" && "(without extension)"}
              </Label>
              <Input
                id="filename"
                placeholder={activeTab === "create" ? "Enter filename" : "Enter filename with extension"}
                value={formData.fileName}
                onChange={(e) => handleInputChange("fileName", e.target.value)}
                className="border-border bg-background"
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="author" className="text-card-foreground">
                Author
              </Label>
              <Input
                id="author"
                placeholder="Enter author name"
                value={formData.author}
                onChange={(e) => handleInputChange("author", e.target.value)}
                className="border-border bg-background"
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="keywords" className="text-card-foreground">
                Keywords
              </Label>
              <Input
                id="keywords"
                placeholder="Enter keywords separated by commas"
                value={formData.keywords}
                onChange={(e) => handleInputChange("keywords", e.target.value)}
                className="border-border bg-background"
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="remark" className="text-card-foreground">
                Remark
              </Label>
              <Textarea
                id="remark"
                placeholder="Enter any remarks or comments"
                value={formData.remark}
                onChange={(e) => handleInputChange("remark", e.target.value)}
                className="border-border bg-background"
                rows={3}
              />
            </div>
          </div>
          
          <TabsContent value="create" className="mt-4">
            <div className="text-sm text-muted-foreground mb-4">
              Only Word documents (.docx) can be created using the editor.
            </div>
            <div className="flex justify-end space-x-2">
              <Button 
                variant="outline" 
                onClick={() => setIsOpen(false)}
                className="border-border text-muted-foreground hover:bg-muted"
              >
                Cancel
              </Button>
              <Button 
                onClick={handleCreateFile}
                className="bg-primary hover:bg-primary-hover text-primary-foreground"
              >
                Open Word Editor
              </Button>
            </div>
          </TabsContent>
          
          <TabsContent value="upload" className="mt-4">
            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="file-upload" className="text-card-foreground">
                  Select File
                </Label>
                <Input
                  id="file-upload"
                  type="file"
                  ref={fileInputRef}
                  onChange={handleUploadFile}
                  accept=".docx,.xlsx,.pptx,.pdf"
                  className="border-border bg-background"
                />
                <div className="text-sm text-muted-foreground">
                  Supported formats: .docx, .xlsx, .pptx, .pdf
                </div>
              </div>
            </div>
            <div className="flex justify-end space-x-2 mt-4">
              <Button 
                variant="outline" 
                onClick={() => setIsOpen(false)}
                className="border-border text-muted-foreground hover:bg-muted"
              >
                Cancel
              </Button>
            </div>
          </TabsContent>
        </Tabs>
      </DialogContent>
    </Dialog>
  );
};

export default CreateFileDialog;